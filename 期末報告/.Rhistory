matcor(weather,power)
matcor(weather[,3:5],power[,3:6])
cc1 <- cc(weather,power)
cc1 <- cc(weather[,3:5],power[,3:6])
View(cc1)
# display the canonical correlations
cc1$cor
ggpairs(weather[,3:5])
require(ggplot2)
require(GGally)
ggpairs(weather[,3:5])
ggpairs(power[,3:6])
# raw canonical coefficients
cc1[3:4]
taipei <- x %>% filter(city%in% c("台北市"))
# summary(x)
# require(ggplot2)
# require(GGally)
# ggpairs(weather[,3:5])
# ggpairs(power[,3:6])
library(dplyr)
taipei <- x %>% filter(city%in% c("台北市"))
View(taipei)
x1 <- x %>% filter(date %in% c("2021"))
View(x1)
x1 <- x %>% filter(date %in% c("2021年01月"))
View(x1)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月"))
x1 <- x1 %>% group_by(city)
View(x1)
x1 <- x1[order(x$city)]
x1 <- x1[order(x1$city)]
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月"))
x1 <- x1[order(x1$city)]
View(x1)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月"))
x1 %>% group_by(city %in% c("台中市","台北市","台東縣","台南市","宜蘭縣","花蓮縣",
"金門縣","南投縣","屏東縣","苗栗縣","桃園市","高雄市",
"基隆市","連江縣","雲林縣","新北市","新竹市","新竹縣",
"嘉義市","嘉義縣","彰化縣","澎湖縣"))
View(x1)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月"))
x1 %>% arrange(city)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月","2021年03月","2021年04月",
"2021年05月","2021年06月","2021年07月","2021年08月",
"2021年09月","2021年10月","2021年11月","2021年12月"))
x1 %>% arrange(city)
x1 <- x1 %>% arrange(city)
View(x)
View(x1)
# tests of canonical dimensions
rho <- cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n <- dim(weather)[1]
p <- length(weather)
q <- length(power)
## Calculate p-values using the F-approximations of different test statistics:
p.asym(rho, n, p, q, tstat = "Wilks")
# cca
# install.packages("CCA")
require(CCA)
cc1 <- cc(weather[,3:5],power[,3:6])
# display the canonical correlations
cc1$cor
# raw canonical coefficients
cc1[3:4]
# compute canonical loadings
cc2 <- comput(weather, power, cc1)
# tests of canonical dimensions
rho <- cc1$cor
## Define number of observations, number of variables in first set, and number of variables in the second set.
n <- dim(weather)[1]
p <- length(weather)
q <- length(power)
p.asym(rho, n, p, q, tstat = "Wilks")
## Calculate p-values using the F-approximations of different test statistics:
library(CCP)
## Calculate p-values using the F-approximations of different test statistics:
install.packages("CCP")
library(CCP)
p.asym(rho, n, p, q, tstat = "Wilks")
# clear all variables
rm(list = ls(all = TRUE))
graphics.off()
# read data
cardat  = read.table("C:/Users/user/Desktop/多變量11101/MVA-ToDo-master/QID-2086-MVAcancarm/carmean2.dat")
View(cardat)
# delete first column (names of the car marks)
car     = cardat[, -1]
# define variable names
colnames(car) = c("economy", "service", "value", "price", "design", "sporty", "safety",
"handling")
# define car brands
rownames(car) = c("Audi", "BMW", "Citroen", "Ferrari", "Fiat", "Ford", "Hyundai",
"Jaguar", "Lada", "Mazda", "Mercedes", "Mitsubishi", "Nissan", "Opel Corsa",
"Opel Vectra", "Peugeot", "Renault", "Rover", "Toyota", "Trabant", "VW Golf",
"VW Passat", "Wartburg")
View(car)
# reordering the columns of the matrix
cars    = cbind(car[, 4:3], car[, 1:2], car[, 5:8])
View(cars)
s       = cov(cars)
s
sa      = s[1:2, 1:2]
sa
sb      = s[3:8, 3:8]
eiga    = eigen(sa)
eigb    = eigen(sb)
sa2     = eiga$vectors %*% diag(1/sqrt(eiga$values)) %*% t(eiga$vectors)
sb2     = eigb$vectors %*% diag(1/sqrt(eigb$values)) %*% t(eigb$vectors)
k       = sa2 %*% s[1:2, 3:8] %*% sb2
si      = svd(k)
a       = sa2 %*% si$u
b       = sb2 %*% si$v
eta     = as.matrix(cars[, 1:2]) %*% a[, 1]
phi     = as.matrix(cars[, 3:8]) %*% b[, 1]
etaphi  = cbind(eta, phi)
# plot
plot(etaphi, type = "n", xlab = "Eta 1", ylab = "Phi 1", main = "Car Brands Data",
cex.lab = 1.2, cex.axis = 1.2, cex.main = 1.8)
text(etaphi, rownames(car))
# reordering the columns of the matrix
s       = cov(x1)
rm(list = ls(all = TRUE))
library("readxl")
weather <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 1)
power <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 2)
colnames(weather) <- c("date","city","溫度","降雨量","相對溼度")
power <- power[,-7]
colnames(power) <- c("date","city","住宅","服務業","農林漁牧","工業")
x <- merge(weather,power,by=c("date","city"))
x <- x[order(x$date),]
# summary(x)
# require(ggplot2)
# require(GGally)
# ggpairs(weather[,3:5])
# ggpairs(power[,3:6])
library(dplyr)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月","2021年03月","2021年04月",
"2021年05月","2021年06月","2021年07月","2021年08月",
"2021年09月","2021年10月","2021年11月","2021年12月"))
x1 <- x1 %>% arrange(city)
# reordering the columns of the matrix
s       = cov(x1)
View(x1)
# reordering the columns of the matrix
s       = cov(x1[3:9])
s
sa      = s[1:3, 1:3]
sb      = s[4:7, 4:7]
eiga    = eigen(sa)
eigb    = eigen(sb)
sa2     = eiga$vectors %*% diag(1/sqrt(eiga$values)) %*% t(eiga$vectors)
sb2     = eigb$vectors %*% diag(1/sqrt(eigb$values)) %*% t(eigb$vectors)
k       = sa2 %*% s[1:3, 4:7] %*% sb2
si      = svd(k)
a       = sa2 %*% si$u
b       = sb2 %*% si$v
eta     = as.matrix(cars[, 1:3]) %*% a[, 1]
# reordering the columns of the matrix
x2 <- x1[3:9]
s       = cov(x2)
sa      = s[1:3, 1:3]
sb      = s[4:7, 4:7]
eiga    = eigen(sa)
eigb    = eigen(sb)
sa2     = eiga$vectors %*% diag(1/sqrt(eiga$values)) %*% t(eiga$vectors)
sb2     = eigb$vectors %*% diag(1/sqrt(eigb$values)) %*% t(eigb$vectors)
k       = sa2 %*% s[1:3, 4:7] %*% sb2
si      = svd(k)
a       = sa2 %*% si$u
b       = sb2 %*% si$v
eta     = as.matrix(x2[, 1:3]) %*% a[, 1]
phi     = as.matrix(x2[, 4:7]) %*% b[, 1]
etaphi  = cbind(eta, phi)
# plot
plot(etaphi, type = "n", xlab = "Eta 1", ylab = "Phi 1", main = " Data")
text(etaphi, rownames(city))
View(x2)
rm(list = ls(all = TRUE))
graphics.off()
library("readxl")
weather <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 1)
power <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 2)
colnames(weather) <- c("date","city","溫度","降雨量","相對溼度")
power <- power[,-7]
colnames(power) <- c("date","city","住宅","服務業","農林漁牧","工業")
x <- merge(weather,power,by=c("date","city"))
View(x)
x <- x[order(x$date),]
View(x)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月","2021年03月","2021年04月",
"2021年05月","2021年06月","2021年07月","2021年08月",
"2021年09月","2021年10月","2021年11月","2021年12月"))
# summary(x)
# require(ggplot2)
# require(GGally)
# ggpairs(weather[,3:5])
# ggpairs(power[,3:6])
library(dplyr)
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月","2021年03月","2021年04月",
"2021年05月","2021年06月","2021年07月","2021年08月",
"2021年09月","2021年10月","2021年11月","2021年12月"))
x1 <- x1 %>% arrange(city)
View(x1)
# reordering the columns of the matrix
# x2 <- x1[3:9]
s       = cov(x1[3:9])
sa      = s[1:3, 1:3]
sb      = s[4:7, 4:7]
eiga    = eigen(sa)
eigb    = eigen(sb)
sa2     = eiga$vectors %*% diag(1/sqrt(eiga$values)) %*% t(eiga$vectors)
sb2     = eigb$vectors %*% diag(1/sqrt(eigb$values)) %*% t(eigb$vectors)
k       = sa2 %*% s[1:3, 4:7] %*% sb2
si      = svd(k)
a       = sa2 %*% si$u
b       = sb2 %*% si$v
eta     = as.matrix(x1[, 3:5]) %*% a[, 1]
phi     = as.matrix(x1[, 6:9]) %*% b[, 1]
etaphi  = cbind(eta, phi)
# plot
plot(etaphi, type = "n", xlab = "Eta 1", ylab = "Phi 1", main = " Data")
text(etaphi, rownames(city))
text(etaphi, rownames(x1$city))
plot(etaphi, type = "n", xlab = "Eta 1", ylab = "Phi 1", main = " Data")
text(etaphi)
graphics.off()
plot(etaphi, type = "n", xlab = "Eta 1", ylab = "Phi 1", main = " Data")
text(etaphi)
plot(etaphi, pch = x1$district, col = x1$district, xlab = "U1", ylab = "V1", main = "First Canonical Variables")
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(etaphi)
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(x1$district)
View(etaphi)
plot(etaphi, type = "n", pch = x1$district, col = x1$district, xlab = "U1", ylab = "V1", main = "First Canonical Variables")
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(etaphi, rownames(x1$district))
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(etaphi, rownames(x1$city))
text(etaphi, rownames(x1$city))
# plot
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(rownames(x1$city))
etaphi,
text(etaphi, rownames(x1$city))
etaphi %>%
ggplot(aes(x=U1,y=V1, color=xm$city))+
geom_point()
library(dplyr)
etaphi %>%
ggplot(aes(x=U1,y=V1, color=xm$city))+
geom_point()
# cc1_x1 <- as.matrix(xm[3:5]) %*% c$xcoef[,1]
# cc1_x2 <- as.matrix(xm[6:9]) %*% c$ycoef[,1]
# cor(cc1_x1,cc1_x2)
# cc2_x1 <- as.matrix(xm[3:5]) %*% c$xcoef[,2]
# cc2_x2 <- as.matrix(xm[6:9]) %*% c$ycoef[,2]
# cca_df <- xm[3:9] %>%
#   mutate(cc1_x1=cc1_x1,
#          cc1_x2=cc1_x2,
#          cc2_x1=cc2_x1,
#          cc2_x2=cc2_x2)
library(ggplot2)
etaphi %>%
ggplot(aes(x=U1,y=V1, color=xm$city))+
geom_point()
ggplot(etaphi,aes(x=U1,y=V1, color=xm$city))+
geom_point()
ggplot(as.data.frame(etaphi),aes(x=U1,y=V1, color=xm$city))+
geom_point()
ggplot(as.data.frame(etaphi),aes(x="U1",y="V1", color=xm$city))+
geom_point()
xm <- scale(x1[3:9])
xm <- cbind(x1[1:2],xm)
ggplot(as.data.frame(etaphi),aes(x="U1",y="V1", color=xm$city))+
geom_point()
ggplot(as.data.frame(etaphi),aes(x=eta,y=phi, color=xm$city))+
geom_point()
ggplot(as.data.frame(etaphi),aes(x=eta,y=phi, color=xm$city))+
geom_point()+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
a
si
rm(list = ls(all = TRUE))
graphics.off()
# import data
x <- read.csv("C:/Users/user/Desktop/R程式設計11101/fin/DOGE.csv", head = T)
# visualization
library(ggplot2)
library(lubridate)
library(tidyverse)
# if your time is a factor: need to convert it to a date-time format
x$Date <- ymd(x$Date)
# sampling
# cv
# library(tidyverse) # easy data manipulation and visualization
library(caret) # easily computing cross-validation methods
# linear model
model2 <- lm(Open ~ ., data = x, x = T)
# testing normality assumption of residuals
library(ggpubr)
ggqqplot(model2$residuals, main = 'residuals')
# testing homogeneous variance assumption of residuals
library(car)
ncvTest(model2)
# 檢查共線性VIF
vif(model12, digits = 3)
# 檢查共線性VIF
vif(model2, digits = 3)
cor(model2)
cor(as.data.frame(model2))
cor(x)
cor(as.matrix(x))
# hypothesis testing
# t-test
x1 <- x$Close
x2 <- x$Open
(var.result = var.test(x1, x2, alternative = "two.sided"))
var.result$p.value
t.test(x1, x2, alternative = "two.sided", mu = 0.0,
paired = FALSE, var.equal = TRUE, conf.level = 0.95)
# linear model
model2 <- lm(Open ~ ., data = x, x = T)
ncvTest(model2)
cor(x1)
cor(x1,x2)
cor(x1,x$High)
View(x)
cor(x[1:6])
cor(x[,1:6])
cor(x[1:6,])
x[,1:6]
cor(x[,2:7])
# close and adj.close則一放進模型中
model0 <- lm(Open ~ High+Low+Close+Volume, data = x)
vif(model0, digits = 3)
# 檢查共線性VIF
cor(x[,2:7]) # close and adj.close are same variables
# close and adj.close則一放進模型中
model0 <- lm(Open ~ High+Low+Close+Volume, data = x)
vif(model0, digits = 3)
# 檢查共線性VIF
cor(x[,2:7]) # close and adj.close are same variables
# close and adj.close則一放進模型中
model0 <- lm(Open ~ High+Low+Close+Volume, data = x)
vif(model0, digits = 3)
# all-possible selection
both.1 <- step(model0, direction = "both", k = 2)
both.1$anova
library(leaps)
out.all.1 <- regsubsets(as.matrix(x[-1]), x$Open, nbest = 1, method = "exhaustive")
s.all.1 <- summary(out.all.1)
round(cbind(s.all.1$which, rsq = s.all.1$rsq, adjr2 = s.all.1$adjr2,
rss = s.all.1$rss, cp = s.all.1$cp, bic = s.all.1$bic), 2)
# close and adj.close則一放進模型中
model0 <- lm(Open ~ High+Low+Close+Volume, data = x)
# all-possible selection
both.1 <- step(model0, direction = "both", k = 2)
# 將volme去掉
model3 <- lm(Open ~ High+Low+Close, data = x)
# all-possible selection
both.2 <- step(model3, direction = "both", k = 2)
model4 <- lm(Open ~ High+Low, data = x)
# all-possible selection
both.2 <- step(model4, direction = "both", k = 2)
model4 <- lm(Open ~ High+Close, data = x)
# all-possible selection
both.2 <- step(model4, direction = "both", k = 2)
model4 <- lm(Open ~ Low+Close, data = x)
# all-possible selection
both.2 <- step(model4, direction = "both", k = 2)
out.all.2 <- regsubsets(as.matrix(x[-1]), x$Open, nbest = 1, method = "exhaustive")
s.all.2 <- summary(out.all.2)
round(cbind(s.all.2$which, rsq = s.all.2$rsq, adjr2 = s.all.2$adjr2,
rss = s.all.2$rss, cp = s.all.2$cp, bic = s.all.2$bic), 2)
rm(list = ls(all = TRUE))
#讀檔合併資料----
library("readxl")
library('dplyr')
weather <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料.xlsx (1)", sheet = 1)
weather <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 1)
power <- read_excel("C:/Users/user/Desktop/多變量11101/期末報告/台灣電力公司_各縣市住宅、服務業及機關用電統計資料 (1).xlsx", sheet = 2)
colnames(weather) <- c("date","city","溫度","降雨量","相對溼度")
power <- power[,-7]
colnames(power) <- c("date","city","住宅","服務業","農林漁牧","工業")
x <- merge(weather,power,by=c("date","city"))
x1 <- x %>% filter(date %in% c("2021年01月","2021年02月","2021年03月","2021年04月",
"2021年05月","2021年06月","2021年07月","2021年08月",
"2021年09月","2021年10月","2021年11月","2021年12月"))
x1 <- x1 %>% arrange(city)
#不要科學記號
options(scipen = 999)
# pca----
# determine the nb of factors
xm <- scale(x1[3:9])
xm <- cbind(x1[1:2],xm)
# cca----
# reordering the columns of the matrix
s       = cov(xm[3:9])
sa      = s[1:3, 1:3]
sb      = s[4:7, 4:7]
eiga    = eigen(sa)
eigb    = eigen(sb)
sa2     = eiga$vectors %*% diag(1/sqrt(eiga$values)) %*% t(eiga$vectors)
sb2     = eigb$vectors %*% diag(1/sqrt(eigb$values)) %*% t(eigb$vectors)
k       = sa2 %*% s[1:3, 4:7] %*% sb2
si      = svd(k)
a       = sa2 %*% si$u
b       = sb2 %*% si$v
eta     = as.matrix(xm[, 3:5]) %*% a[, 1]
phi     = as.matrix(xm[, 6:9]) %*% b[, 1]
etaphi  = cbind(eta, phi)
si
cov(xm[3:9],etaphi)
library(ggplot2)
ggplot(as.data.frame(etaphi),aes(x=eta,y=phi, color=xm$city))+
geom_point()+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
x1$district=NULL
for (i in c(1:nrow(x1))){
if (x1$city[i] == "台中市") {
x1$district[i]=2
} else if (x1$city[i] == "台北市") {
x1$district[i]=1
} else if (x1$city[i] == "台東市") {
x1$district[i]=4
} else if (x1$city[i] == "台南市") {
x1$district[i]=3
} else if (x1$city[i] == "宜蘭縣") {
x1$district[i]=1
} else if (x1$city[i] == "花蓮縣") {
x1$district[i]=4
} else if (x1$city[i] == "金門縣") {
x1$district[i]=5
} else if (x1$city[i] == "南投縣") {
x1$district[i]=2
} else if (x1$city[i] == "屏東縣") {
x1$district[i]=3
} else if (x1$city[i] == "苗栗縣") {
x1$district[i]=2
} else if (x1$city[i] == "桃園市") {
x1$district[i]=1
} else if (x1$city[i] == "高雄市") {
x1$district[i]=3
} else if (x1$city[i] == "基隆市") {
x1$district[i]=1
} else if (x1$city[i] == "連江縣") {
x1$district[i]=5
} else if (x1$city[i] == "雲林縣") {
x1$district[i]=2
} else if (x1$city[i] == "新北市") {
x1$district[i]=1
} else if (x1$city[i] == "新竹市") {
x1$district[i]=1
} else if (x1$city[i] == "新竹縣") {
x1$district[i]=1
} else if (x1$city[i] == "嘉義市") {
x1$district[i]=3
} else if (x1$city[i] == "嘉義縣") {
x1$district[i]=3
} else if (x1$city[i] == "彰化縣") {
x1$district[i]=2
} else if (x1$city[i] == "澎湖縣") {
x1$district[i]=3
}
}
ggplot(as.data.frame(etaphi),aes(x=eta,y=phi, color=x1$district))+
geom_point()+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$district))+
geom_point()+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$district, alpha=0.5))+
geom_point()+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$district))+
geom_point()+
scale_color_brewer(palette="Spectral")+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
View(x1)
View(etaphi)
# plot
plot(etaphi, type = "n", xlab = "U1", ylab = "V1", main = "First Canonical Variables")
text(etaphi)
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$district))+
geom_point()+
# scale_color_brewer(palette="Spectral")+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$city))+
geom_point()+
# scale_color_brewer(palette="Spectral")+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
district
ggplot(as.data.frame(etaphi),aes(x=eta, y=phi, color=x1$district))+
geom_point()+
# scale_color_brewer(palette="Spectral")+
labs(y = "V1", x = "U1", title = "First Canonical Variables")
co <- cov(xm[3:9],etaphi)
co[1:3,]^2/3
sum(co[1:3,]^2/3)
co[4:7,]^2/4
colSums(co[1:3,]^2/3)
colSums([4:7,]^2/4)
colSums(co[4:7,]^2/4)
co <- cov(xm[3:9],etaphi)
r2_1 <- colSums(co[1:3,]^2/3)
r2_2 <- colSums(co[4:7,]^2/4)
co
r2_1
r2_2
