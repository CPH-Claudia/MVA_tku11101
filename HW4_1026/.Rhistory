A%*%sig%*%t(B)
A <- matrix(c(1, 1))
B <- matrix(c(1, -1))
sig = matrix(c(1, 0, 0, 1), ncol = 2)  # covariance matrix
A%*%sig%*%t(B)
A
A <- matrix(c(1, 1))
A
A <- t(matrix(c(1, 1)))
A
A%*%sig%*%t(B)
B
A%*%sig%*%B
set.seed(1024)
X = mvrnorm(n, mu, sig, 2)
ax <- t(A)%*%X
bx <- t(B)%*%X
X = mvrnorm(n, mu, sig, 2)
n   = 200  # number of draws
mu  = c(3, 2)  # mean vector
sig = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
# bivariate normal sample
set.seed(1024)
y = mvrnorm(n, mu, sig, 2)
x <- sqrt(sig)%*%y+mu
libraries = c("MASS", "mnormt")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# parameter settings
n   = 200  # number of draws
mu  = c(3, 2)  # mean vector
sig = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
# bivariate normal sample
set.seed(1024)
y = mvrnorm(n, mu, sig, 2)
x <- sqrt(sig)%*%y+mu
y
n   = 2  # number of draws
mu  = c(3, 2)  # mean vector
sig = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
# bivariate normal sample
set.seed(1024)
y = mvrnorm(n, mu, sig, 2)
x <- sqrt(sig)%*%y+mu
x
x <- sqrt(diag(sig))%*%y+mu
x
xgrid = seq(from = (mu[1] - 3 * sqrt(sig[1, 1])), to = (mu[1] + 3 * sqrt(sig[1, 1])),
length.out = 200)
ygrid = seq(from = (mu[2] - 3 * sqrt(sig[2, 2])), to = (mu[2] + 3 * sqrt(sig[2, 2])),
length.out = 200)
z     = outer(xgrid, ygrid, FUN = function(xgrid, ygrid) {
dmnorm(cbind(xgrid, ygrid), mean = mu, varcov = sig)
})
# Contour ellipses
contour(xgrid, ygrid, z, xlim = range(xgrid), ylim = range(ygrid), nlevels = 10, col = c("blue",
"black", "yellow", "cyan", "red", "magenta", "green", "blue", "black"), lwd = 3,
cex.axis = 1, xlab = "X1", ylab = "X2")
title("Contour Ellipses")
B
n   = 2  # number of draws
mu  = c(2, 2)  # mean vector
sig = matrix(c(1, 0, 0, 1), ncol = 2)  # covariance matrix
A <- t(matrix(c(1, 1)))
B <- t(matrix(c(1, -1)))
# bivariate normal sample
set.seed(1024)
X = mvrnorm(n, mu, sig, 2)
ax <- t(A)%*%X
bx <- t(B)%*%X
ax%*%t(bx)
X = mvrnorm(n, mu, sig, 2)
ax <- A%*%X
bx <- B%*%X
ax%*%t(bx)
A%*%sig%*%t(B)
ax%*%sig%*%t(bx)
xgrid
n1   = 200
mu1  = c(3, 2)  # mean vector
sig1 = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
# bivariate normal sample
set.seed(1024)
y = mvrnorm(n1, mu1, sig1, 2)
x <- sqrt(diag(sig1))%*%y+mu1
n1   = 200  # number of draws
mu1  = c(3, 2)  # mean vector
sig1 = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
mahalsig = eigen(sig1)$vectors%*%sqrt(diag(eigen(sig1)$values))%*%t(eigen(sig1)$vectors)
# bivariate normal sample
set.seed(1024)
x = mvrnorm(n1, mu1, mahalsig, 2)
xgrid = seq(from = (mu1[1] - 3 * sqrt(mahalsig[1, 1])), to = (mu1[1] + 3 * sqrt(mahalsig[1, 1])),
length.out = 200)
ygrid = seq(from = (mu1[2] - 3 * sqrt(mahalsig[2, 2])), to = (mu1[2] + 3 * sqrt(mahalsig[2, 2])),
length.out = 200)
z     = outer(xgrid, ygrid, FUN = function(xgrid, ygrid) {
dmnorm(cbind(xgrid, ygrid), mean = mu1, varcov = mahalsig)
})
# Contour ellipses
contour(xgrid, ygrid, z, xlim = range(xgrid), ylim = range(ygrid), nlevels = 10, col = c("blue",
"black", "yellow", "cyan", "red", "magenta", "green", "blue", "black"), lwd = 3,
cex.axis = 1, xlab = "X1", ylab = "X2")
title("Contour Ellipses")
x
Ax2%*%Bx2
Ax2 <- A%*%x2
Bx2 <- B%*%x2
x2 = mvrnorm(n2, mu2, sig2, 2)
n2   = 200  # number of draws
mu2  = c(2, 2)  # mean vector
sig2 = matrix(c(1, 0, 0, 1), ncol = 2)  # covariance matrix
A <- t(matrix(c(1, 1)))
B <- t(matrix(c(1, -1)))
# bivariate normal sample
set.seed(1024)
x2 = mvrnorm(n2, mu2, sig2, 2)
Ax2 <- A%*%x2
Bx2 <- B%*%x2
Ax2%*%Bx2
A%*%sig2%*%t(B)
ax2%*%sig2%*%t(bx2)
Ax2%*%sig2%*%t(Bx2)
Ax2 <- A%*%x2
Bx2 <- B%*%x2
Ax2%*%sig2%*%t(Bx2)
A%*%sig2%*%t(B)
Ax2%*%sig2%*%t(Bx2)
A%*%sig2%*%t(A)
B%*%sig2%*%t(A) # sigma21
B%*%sig2%*%t(B) # sigma22
#
m1 <- A%*%mu2
m2 <- B%*%mu2
m1
m2
x2
# clear all variables
rm(list = ls(all = TRUE))
graphics.off()
# 4.1
# install and load packages
libraries = c("MASS", "mnormt")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# parameter settings
n1   = 200  # number of draws
mu1  = c(3, 2)  # mean vector
sig1 = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
mahalsig = eigen(sig1)$vectors%*%sqrt(diag(eigen(sig1)$values))%*%t(eigen(sig1)$vectors)
# bivariate normal sample
set.seed(1024)
x = mvrnorm(n1, mu1, sig1, 2)
# bivariate normal density
xgrid = seq(from = (mu1[1] - 3 * sqrt(sig1[1, 1])), to = (mu1[1] + 3 * sqrt(sig1[1, 1])),
length.out = 200)
ygrid = seq(from = (mu1[2] - 3 * sqrt(sig1[2, 2])), to = (mu1[2] + 3 * sqrt(sig1[2, 2])),
length.out = 200)
z     = outer(xgrid, ygrid, FUN = function(xgrid, ygrid) {
dmnorm(cbind(xgrid, ygrid), mean = mu1, varcov = sig1)
})
# Contour ellipses
contour(xgrid, ygrid, z, xlim = range(xgrid), ylim = range(ygrid), nlevels = 10, col = c("blue",
"black", "yellow", "cyan", "red", "magenta", "green", "blue", "black"), lwd = 3,
cex.axis = 1, xlab = "X1", ylab = "X2")
title("Contour Ellipses")
n2   = 200  # number of draws
mu2  = c(2, 2)  # mean vector
sig2 = matrix(c(1, 0, 0, 1), ncol = 2)  # covariance matrix
A <- t(matrix(c(1, 1)))
B <- t(matrix(c(1, -1)))
# bivariate normal sample
set.seed(1024)
x2 = mvrnorm(n2, mu2, sig2, 2)
# 先做AX,BX服從常態，再做共變異數=0
m1 <- A%*%mu2
m2 <- B%*%mu2
s11 <- A%*%sig2%*%t(A)
s12 <- A%*%sig2%*%t(B)
s21 <- B%*%sig2%*%t(A)
s22 <- B%*%sig2%*%t(B)
s12
m1
m2
s11
s12
s21
s22
S <- matrix(c(s11, s21, s12, s22))
S
S <- matrix(c(s11, s21, s12, s22), ncol = 2)
S
m1
# clear all variables
rm(list = ls(all = TRUE))
graphics.off()
# 4.1
# install and load packages
libraries = c("MASS", "mnormt")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# parameter settings
n1   = 200  # number of draws
mu1  = c(3, 2)  # mean vector
sig1 = matrix(c(1, -1.5, -1.5, 4), ncol = 2)  # covariance matrix
# mahalsig = eigen(sig1)$vectors%*%sqrt(diag(eigen(sig1)$values))%*%t(eigen(sig1)$vectors)
# bivariate normal sample
set.seed(1024)
x = mvrnorm(n1, mu1, sig1, 2)
# bivariate normal density
xgrid = seq(from = (mu1[1] - 3 * sqrt(sig1[1, 1])), to = (mu1[1] + 3 * sqrt(sig1[1, 1])),
length.out = 200)
ygrid = seq(from = (mu1[2] - 3 * sqrt(sig1[2, 2])), to = (mu1[2] + 3 * sqrt(sig1[2, 2])),
length.out = 200)
z     = outer(xgrid, ygrid, FUN = function(xgrid, ygrid) {
dmnorm(cbind(xgrid, ygrid), mean = mu1, varcov = sig1)
})
# Contour ellipses
contour(xgrid, ygrid, z, xlim = range(xgrid), ylim = range(ygrid), nlevels = 10, col = c("blue",
"black", "yellow", "cyan", "red", "magenta", "green", "blue", "black"), lwd = 3,
cex.axis = 1, xlab = "X1", ylab = "X2")
title("Contour Ellipses")
# 5.1
# parameter settings
n2   = 200  # number of draws
mu2  = c(2, 2)  # mean vector
sig2 = matrix(c(1, 0, 0, 1), ncol = 2)  # covariance matrix
A <- t(matrix(c(1, 1)))
B <- t(matrix(c(1, -1)))
# bivariate normal sample
set.seed(1024)
x2 = mvrnorm(n2, mu2, sig2, 2)
# 先做AX,BX服從常態，再做共變異數=0
m1 <- A%*%mu2
m2 <- B%*%mu2
s11 <- A%*%sig2%*%t(A)
s12 <- A%*%sig2%*%t(B)
s21 <- B%*%sig2%*%t(A)
s22 <- B%*%sig2%*%t(B)
S <- matrix(c(s11, s21, s12, s22), ncol = 2)
# install and load packages
libraries = c("KernSmooth", "graphics")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# load data
xx = read.table("bank2.dat")
# load data
xx = read.table("C:/Users/user/Desktop/多變量11101/MVA-ToDo-master/QID-1207-MVAdenbank3/bank2.dat")
# Compute a kernel density estimates
dj = bkde2D(xx[, 4:5], bandwidth = 1.06 * c(sd(xx[, 4]), sd(xx[, 5])) * 200^(-1/5))
d1 = bkde(xx[, 4], gridsize = 51)
d2 = bkde(xx[, 5], gridsize = 51)
dp = (d1$y) %*% t(d2$y)
# plot
persp(d1$x, d2$x, dp, box = FALSE, main = "Joint estimate")
persp(dj$x1, dj$x2, dj$fhat, box = FALSE, main = "Product of estimates")
# Contour ellipses
contour(xgrid, ygrid, z, xlim = range(xgrid), ylim = range(ygrid), nlevels = 10, col = c("blue",
"black", "yellow", "cyan", "red", "magenta", "green", "blue", "black"), lwd = 3,
cex.axis = 1, xlab = "X1", ylab = "X2")
z
x
#create surface plot
persp(xgrid, ygrid, z, theta=-30, phi=25, expand=0.6, ticktype='detailed')
#create surface plot
persp(xgrid, ygrid, z, theta=-30, phi=25, expand=0.6, ticktype='detailed', xlab="X1", ylab = "X2" )
